/********************************************************************
DBML - Database Markup Language for ERD & Documentation

DBML is an unique language developed by the Holistics Software INC.
(https://www.holistics.io/) designed to define and document database
structures and schema (https://dbml.dbdiagram.io/home).

The project schema and usages are described under the `project` tag
which supports markdown syntax when the document is hosted using
https://dbdocs.io/ website.
********************************************************************/

project finfolio {
  database_type: 'PostgreSQL'
  document_name: 'Finace Portfolio Schema'

  note: '''
    The schema is designed for **personal financial analysis** (for \
    self and other family members) that gives a quick glimpse on the \
    earnings and expenditure. The design is kept as simple as \
    possible, however it is recommended that people with a coding \
    background to use the same.

    More Information: https://github.com/ZenithClown/finfolio

    ## ERD Documentation Guide

    A single file approach is adopted for easier management, \
    documentation and understanding the schema layout. While any \
    type of database can be used to store the data, PostgreSQL is \
    used as the de-facto database by myself.

    [DB Diagram](https://dbdiagram.io/) is used for documenting, and \
    hosting the docs using the [DBML](https://dbml.dbdiagram.io/home) \
    for visibility. The following notations are adopted.

    ### SQL Name Notations

    Typically, there is no standard (or universal) notation guide \
    when it comes to SQL language, however the following must be \
    maintained to keep a uniformity:

      *  Object names should be easily understood,
      * Table and column names are not pluraized, and are `snake_case`,
      * Abbreviations should be self explanatory and should be kept \
        uniform throught the database,
      * Some prefixes are used for better understanding and readbility:
        - `pk_` : primary key,
        - `fk_` : foreign key,
        - `uq_` : column with an unique constraint,
        - `mw_` : master table name prefix,
        - `vw_` : view table name prefix,
        - `trx_` : transactional table name prefix,
        - `usp_` : user defined stored procedures,
        - `ufn_` : user defined functions,

    ### Schema Defination

    The database is seperated into the following schema for control \
    and seperating different workloads:

    #### METADATA (`meta`) Schema Namespace

    A special schema namespace to hold configuration and related \
    information that is being used in the database for various \
    reporting.

    ## Data Security & BI

    The data security is left at the discretion of the end-user. \
    Note that the tool is developed for personal finance management \
    and a person with the knowledge of database and related tools \
    used are required to handle the same.

    Typically, if an user uses secured client-server database like \
    MySQL or PostgreSQL then the same may suffice in terms of \
    security.
  '''
}

// ! METADATA Namespace - Configuration & Settings
table meta.account_type_detail {
  account_type_id char(3) [pk]

  // typically the additional column are for end user (internal)
  account_type_name varchar(32)  [unique, not null]
  account_type_desc varchar(128) [unique, not null]
}

table meta.account_subtype_detail {
  account_subtype_id char(3) [pk]
  account_type_id    char(3) [not null, ref: > meta.account_type_detail.account_type_id]

  // typically the additional column are for end user (internal)
  account_subtype_name varchar(32) [unique, not null]
  account_subtype_desc varchar(64) [unique]
}

table meta.transaction_method {
  method_name varchar(7)  [pk]
  method_desc varchar(64) [unique, not null]
}

table meta.expense_category {
  expense_category_name varchar(16) [pk]
  expense_category_desc varchar(72) [unique, not null]
}

table meta.expense_subcategory {
  expense_subcategory_name varchar(48) [pk]
  primary_expense_category varchar(16) [not null, ref: > meta.expense_category.expense_category_name]
  expense_subcategory_desc varchar(96) [unique, not null]
}

table meta.income_category {
  income_category_name varchar(16) [pk]
  income_category_desc varchar(72) [unique, not null]
}

table meta.income_subcategory {
  income_subcategory_name varchar(48) [pk]
  primary_income_category varchar(16) [not null, ref: > meta.income_category.income_category_name]
  income_subcategory_desc varchar(96) [unique, not null]
}

// ! PUBLIC Namespace - Using the default schema of PostgreSQL to hold user's essential informations
table public.user_account_detail {
  username varchar(16) [pk]
  fullname varchar(64) [unique, not null]

  // good to have features, but not required to be maintained
  email varchar(128) [unique]
  phone varchar(16)  [unique]

  // date of birth is crucial for certain calculations/projections
  date_of_birth date

  // the user role and subrole is controlled externally to group
  user_role     integer [not null, ref: > meta.user_role.role_id]
  user_subrole  integer [ref: > meta.user_subrole.subrole_id]

  note: '''
    Table Schema for an User Account

    The user account is the starting point for the personal \
    finance management application, where, the head of the \
    family may add more members account details.
  '''
}

table public.ledger_account_detail {
  // ? using randomly generated keys for account id
  // however, other end user may change the same as per need
  ledger_account_id char(5) [pk]

  // the following information is for identification by end user
  account_name  varchar(64) [unique, not null]
  account_owner varchar(16) [not null, ref: > public.user_account_detail.username]
  
  // the type of account has a significant impact on end calculation
  account_type_id    char(3) [unique, not null, ref: > meta.account_type_detail.account_type_id]
  account_subtype_id char(3) [ref: > meta.account_subtype_detail.account_subtype_id]

  // ? account opening and closing information for future reference
  account_opened_on date [not null]
  account_closed_on date

  // an account may also be set as inactive even if the account is not closed
  account_marked_inactive_on date

  // ? we may not have all the transactions, thus we can set an opening balance
  opening_balance             numeric(12, 2) [not null, default: 0.00]
  opening_balance_recorded_on date           [not null] // default `account_opened_on`
}

// ! PRIVATE Namespace - Schema to hold user transaction informations
table private.user_transaction {
  // ? primary table containing all the transactions for all tracked accounts
  transaction_id bigserial [pk]

  account_id char(5) [not null, ref: > public.ledger_account_detail.ledger_account_id]

  // trx:: transaction short hand, created to reduce column name
  // all the below columns are important and is fetched/kept as available from the passbook
  trx_date   date           [not null]
  trx_type   char(1)        [not null, ref: > meta.transaction_type.type_id]
  trx_desc   varchar(512)   [not null]
  trx_drvd   varchar(512)   [note: 'Derived transaction, this field is typically a cleaned text from the original description.']
  trx_amount numeric(12, 2) [not null]

  // additional fields which can either be auto populated by ai/ml or maybe updated manually by the user
  transfer_method varchar(7) [ref: > meta.transaction_method.method_name]

  // categorization of transactions based on different categories and sub categories
  expense_category_head    varchar(16) [ref: > meta.expense_category.expense_category_name]
  expense_subcategory_head varchar(48) [ref: > meta.expense_subcategory.expense_subcategory_name]

  // ? utility field for developer purpose and have no other usage
  created_on timestamp [not null, default: 'timezone(utc, now())']
  updated_at timestamp
}

table private.trx_sender_detail {
  // captures the sender's information of the transaction - which can either be rule based or automated
  _id bigserial [pk, note: '_pk_trx_duality_id_sender']
  transaction_id bigint [unique, not null, ref: > private.user_transaction.transaction_id]

  sending_user      varchar(16) [ref: > public.user_account_detail.username]
  sending_account   char(5)     [ref: > public.ledger_account_detail.ledger_account_id]
}

table private.trx_receiver_detail {
  // captures the receiver's information of the transaction - which can either be rule based or automated
  _id bigserial [pk, note: '_pk_trx_duality_id_receiver']
  transaction_id bigint [unique, not null, ref: > private.user_transaction.transaction_id]

  receiving_user    varchar(16) [ref: > public.user_account_detail.username]
  receiving_account char(5)     [ref: > public.ledger_account_detail.ledger_account_id]
}
