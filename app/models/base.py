# -*- encoding: utf-8 -*-

"""
Base Configuration SQLAlchemy ORM Models
========================================

The base model exposes the data model for the :mod:`SQLAlchemy` ORM
instances, while the output model is for any response to the handler.
"""

from sqlalchemy import MetaData
from sqlalchemy.orm import DeclarativeBase

class ModelClass(DeclarativeBase):
    """
    Model Class for Declarative SQL Alchemy ORM

    The ``DeclarativeBase`` is introduced in the :mod:`SQLAlchemy 2.x`
    which replaces the :func:`declarative_base()` function, enbling
    a model to inherit and instantiate the base class.

    The ``convention`` is used to define the naming convention for
    the :mod:`SQLAlchemy` models, without which unpredictable
    names are generated by the ORM.
    """

    metadata = MetaData(naming_convention = {
        "ix": "ix_%(column_0_label)s",
        "uq": "uq_%(table_name)s_%(column_0_name)s",
        "ck": "ck_%(table_name)s_%(constraint_name)s",
        "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
        "pk": "pk_%(table_name)s",
    })


    def __repr__(self) -> str:
        return f"<Class Name: {self.__class__.__name__}," \
        + f"Model Attributes: {self.__dict__}>"


    def __str__(self) -> str:
        return f"<{self.__class__.__name__}>"
