/********************************************************************
DBML - Database Markup Language for ERD & Documentation

DBML is an unique language developed by the Holistics Software INC.
(https://www.holistics.io/) designed to define and document database
structures and schema (https://dbml.dbdiagram.io/home).

The project schema and usages are described under the `project` tag
which supports markdown syntax when the document is hosted using
https://dbdocs.io/ website.
********************************************************************/

project finfolio {
  database_type: 'PostgreSQL'
  document_name: 'Finace Portfolio Schema'

  note: '''
    The schema is designed for **personal financial analysis** (for \
    self and other family members) that gives a quick glimpse on the \
    earnings and expenditure. The design is kept as simple as \
    possible, however it is recommended that people with a coding \
    background to use the same.

    More Information: https://github.com/ZenithClown/finfolio

    ## ERD Documentation Guide

    A single file approach is adopted for easier management, \
    documentation and understanding the schema layout. While any \
    type of database can be used to store the data, PostgreSQL is \
    used as the de-facto database by myself.

    [DB Diagram](https://dbdiagram.io/) is used for documenting, and \
    hosting the docs using the [DBML](https://dbml.dbdiagram.io/home) \
    for visibility. The following notations are adopted.

    ### SQL Name Notations

    Typically, there is no standard (or universal) notation guide \
    when it comes to SQL language, however the following must be \
    maintained to keep a uniformity:

      *  Object names should be easily understood,
      * Table and column names are not pluraized, and are `snake_case`,
      * Abbreviations should be self explanatory and should be kept \
        uniform throught the database,
      * Some prefixes are used for better understanding and readbility:
        - `pk_` : primary key,
        - `fk_` : foreign key,
        - `uq_` : column with an unique constraint,
        - `mw_` : master table name prefix,
        - `vw_` : view table name prefix,
        - `trx_` : transactional table name prefix,
        - `usp_` : user defined stored procedures,
        - `ufn_` : user defined functions,

    ### Schema Defination

    The database is seperated into the following schema for control \
    and seperating different workloads:

    #### METADATA (`meta`) Schema Namespace

    A special schema namespace to hold configuration and related \
    information that is being used in the database for various \
    reporting.

    ## Data Security & BI

    The data security is left at the discretion of the end-user. \
    Note that the tool is developed for personal finance management \
    and a person with the knowledge of database and related tools \
    used are required to handle the same.

    Typically, if an user uses secured client-server database like \
    MySQL or PostgreSQL then the same may suffice in terms of \
    security.
  '''
}

// ! METADATA Namespace - Configuration & Settings
table meta.user_role {
  role_id serial [pk, note: 'pk_role_id']
  
  // the name and description to be fetched for decorations
  role_name char(4)     [unique, not null, note: 'uq_role_name']
  role_desc varchar(64) [unique, note: 'uq_role_description']
}

table meta.user_subrole {
  subrole_id  serial  [pk, note: 'pk_subrole_id']
  role_id     integer [not null, ref: > meta.user_role.role_id, note: 'fk_parent_role_id']

  subrole_name  varchar(32)  [unique, not null, note: 'uq_subrole_name']
  subrole_desc  varchar(128) [unique, note: 'uq_subrole_description']
}

table meta.user_account_detail {
  username varchar(16) [pk, note: 'pk_username']
  fullname varchar(64) [unique, not null, note: 'uq_user_fullname']

  // good to have features, but not required to be maintained
  email varchar(128) [unique, note: 'uq_user_email_address']
  phone varchar(16)  [unique, note: 'uq_user_phone_number']

  // date of birth is crucial for certain calculations/projections
  date_of_birth date

  // the user role and subrole is controlled externally to group
  user_role     integer [not null, ref: > meta.user_role.role_id, note: 'fk_user_role_id']
  user_subrole  integer [ref: > meta.user_subrole.subrole_id, note: 'fk_user_subrole_id']

  note: '''
    Table Schema for an User Account

    The user account is the starting point for the personal \
    finance management application, where, the head of the \
    family may add more members account details.
  '''
}

table meta.account_type_detail {
  account_type_id char(3) [pk, note: 'pk_account_type_id']

  // typically the additional column are for end user (internal)
  account_type_name varchar(32)  [unique, not null, note: 'uq_account_type_name']
  account_type_desc varchar(128) [unique, not null, note: 'uq_account_type_desc']
}

table meta.account_subtype_detail {
  account_subtype_id char(3) [pk, note: 'pk_account_subtype_id']
  account_type_id    char(3) [not null, ref: > meta.account_type_detail.account_type_id, note: 'fk_account_type_id']

  // typically the additional column are for end user (internal)
  account_subtype_name varchar(32) [unique, not null, note: 'uq_account_subtype_name']
  account_subtype_desc varchar(64) [unique, note: 'uq_account_subtype_desc']
}

table meta.ledger_account_detail {
  // ? using randomly generated keys for account id
  // however, other end user may change the same as per need
  ledger_account_id char(5) [pk, note: 'pk_ledger_account_id']

  // the following information is for identification by end user
  account_name  varchar(64) [unique, not null, note: 'uq_account_name']
  account_owner varchar(16) [not null, ref: > meta.user_account_detail.username, note: 'fk_account_owner']
  
  // the type of account has a significant impact on end calculation
  account_type_id    char(3) [unique, not null, ref: > meta.account_type_detail.account_type_id, note: 'fk_ledger_account_type_id']
  account_subtype_id char(3) [ref: > meta.account_subtype_detail.account_subtype_id, note: 'fk_ledger_sub_account_type_id']

  // ? account opening and closing information for future reference
  account_opened_on date [not null]
  account_closed_on date

  // an account may also be set as inactive even if the account is not closed
  account_marked_inactive_on date

  // ? we may not have all the transactions, thus we can set an opening balance
  opening_balance             numeric(19, 2) [not null, default: 0.00]
  opening_balance_recorded_on date           [not null] // default `account_opened_on`
}
